// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q72kFJDPbi6GCvfvYJFAr
// Component: HyDseDZGZYaA
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: q72kFJDPbi6GCvfvYJFAr/projectcss
import sty from "./PlasmicMarianaAccountCode.module.css"; // plasmic-import: HyDseDZGZYaA/css

createPlasmicElementProxy;

export const PlasmicMarianaAccountCode__VariantProps = new Array();

export const PlasmicMarianaAccountCode__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMarianaAccountCode__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Embed
        data-plasmic-name={"marianaAccountCode"}
        data-plasmic-override={overrides.marianaAccountCode}
        className={classNames("__wab_instance", sty.marianaAccountCode)}
        code={'<div data-mariana-integrations="/account"></div>'}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "marianaAccountCode"],
  marianaAccountCode: ["marianaAccountCode"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMarianaAccountCode__ArgProps,
          internalVariantPropNames: PlasmicMarianaAccountCode__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMarianaAccountCode__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMarianaAccountCode";
  } else {
    func.displayName = `PlasmicMarianaAccountCode.${nodeName}`;
  }
  return func;
}

export const PlasmicMarianaAccountCode = Object.assign(
  // Top-level PlasmicMarianaAccountCode renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    marianaAccountCode: makeNodeComponent("marianaAccountCode"),
    // Metadata about props expected for PlasmicMarianaAccountCode
    internalVariantProps: PlasmicMarianaAccountCode__VariantProps,
    internalArgProps: PlasmicMarianaAccountCode__ArgProps
  }
);

export default PlasmicMarianaAccountCode;
/* prettier-ignore-end */
