// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q72kFJDPbi6GCvfvYJFAr
// Component: JkrZoI10Ed6-
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantswN0X0O3Pyupg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wN0X0o3PYUPG/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: q72kFJDPbi6GCvfvYJFAr/projectcss
import sty from "./PlasmicSectionContactUs.module.css"; // plasmic-import: JkrZoI10Ed6-/css

createPlasmicElementProxy;

export const PlasmicSectionContactUs__VariantProps = new Array();

export const PlasmicSectionContactUs__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionContactUs__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswN0X0O3Pyupg()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__espNh)}
        >
          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__lqpEt
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "General Inquiries"
              : "General Inquiries"}
          </h2>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eVuq1
            )}
          >
            {
              "Please email admin@halcyonstudio.us for general questions. If you're interested in private sessions or studio rentals, please complete the form found on the Privates Page."
            }
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qyghT)}
        >
          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__pg1J2
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Class Schedules & Hours"
              : "Hours and Class Schedules"}
          </h2>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zt8Rx
            )}
          >
            {
              "Class Schedules can be found on the Class Schedule Page. Studio Hours are consistent with our schedule."
            }
          </div>
        </Stack__>
      </section>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "section"],
  section: ["section"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionContactUs__ArgProps,
          internalVariantPropNames: PlasmicSectionContactUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionContactUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionContactUs";
  } else {
    func.displayName = `PlasmicSectionContactUs.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionContactUs = Object.assign(
  // Top-level PlasmicSectionContactUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    // Metadata about props expected for PlasmicSectionContactUs
    internalVariantProps: PlasmicSectionContactUs__VariantProps,
    internalArgProps: PlasmicSectionContactUs__ArgProps
  }
);

export default PlasmicSectionContactUs;
/* prettier-ignore-end */
