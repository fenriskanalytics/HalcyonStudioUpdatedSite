// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q72kFJDPbi6GCvfvYJFAr
// Component: N9yXMVXjhCvo
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import HalcyonNavBar from "../../HalcyonNavBar"; // plasmic-import: BJ5uREdrA1yX/component
import ContainerPrivates from "../../ContainerPrivates"; // plasmic-import: UD8YGzXRU9qJ/component
import FormPrivates from "../../FormPrivates"; // plasmic-import: 9MXOK3-AcYt3/component
import FooterHalcyon from "../../FooterHalcyon"; // plasmic-import: bbtps6nNPDXa/component
import FooterBottomHalcyon from "../../FooterBottomHalcyon"; // plasmic-import: fpXbpiSnmBO-/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: q72kFJDPbi6GCvfvYJFAr/projectcss
import sty from "./PlasmicPrivates.module.css"; // plasmic-import: N9yXMVXjhCvo/css

createPlasmicElementProxy;

export const PlasmicPrivates__VariantProps = new Array();

export const PlasmicPrivates__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPrivates__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <HalcyonNavBar
            data-plasmic-name={"halcyonNavBar"}
            data-plasmic-override={overrides.halcyonNavBar}
            className={classNames("__wab_instance", sty.halcyonNavBar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__o6TLp)}>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <ContainerPrivates
                data-plasmic-name={"containerPrivates"}
                data-plasmic-override={overrides.containerPrivates}
                className={classNames("__wab_instance", sty.containerPrivates)}
              />

              <div className={classNames(projectcss.all, sty.freeBox__hrXx)}>
                <FormPrivates
                  data-plasmic-name={"formPrivates"}
                  data-plasmic-override={overrides.formPrivates}
                  className={classNames("__wab_instance", sty.formPrivates)}
                />
              </div>
            </section>
          </div>
          <FooterHalcyon
            data-plasmic-name={"footerHalcyon"}
            data-plasmic-override={overrides.footerHalcyon}
            className={classNames("__wab_instance", sty.footerHalcyon)}
          />

          <FooterBottomHalcyon
            data-plasmic-name={"footerBottomHalcyon"}
            data-plasmic-override={overrides.footerBottomHalcyon}
            className={classNames("__wab_instance", sty.footerBottomHalcyon)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "halcyonNavBar",
    "section",
    "containerPrivates",
    "formPrivates",
    "footerHalcyon",
    "footerBottomHalcyon"
  ],

  halcyonNavBar: ["halcyonNavBar"],
  section: ["section", "containerPrivates", "formPrivates"],
  containerPrivates: ["containerPrivates"],
  formPrivates: ["formPrivates"],
  footerHalcyon: ["footerHalcyon"],
  footerBottomHalcyon: ["footerBottomHalcyon"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPrivates__ArgProps,
          internalVariantPropNames: PlasmicPrivates__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPrivates__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrivates";
  } else {
    func.displayName = `PlasmicPrivates.${nodeName}`;
  }
  return func;
}

export const PlasmicPrivates = Object.assign(
  // Top-level PlasmicPrivates renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    halcyonNavBar: makeNodeComponent("halcyonNavBar"),
    section: makeNodeComponent("section"),
    containerPrivates: makeNodeComponent("containerPrivates"),
    formPrivates: makeNodeComponent("formPrivates"),
    footerHalcyon: makeNodeComponent("footerHalcyon"),
    footerBottomHalcyon: makeNodeComponent("footerBottomHalcyon"),
    // Metadata about props expected for PlasmicPrivates
    internalVariantProps: PlasmicPrivates__VariantProps,
    internalArgProps: PlasmicPrivates__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPrivates;
/* prettier-ignore-end */
