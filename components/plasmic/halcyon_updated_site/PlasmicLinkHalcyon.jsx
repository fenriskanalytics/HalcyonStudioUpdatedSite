// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q72kFJDPbi6GCvfvYJFAr
// Component: LUgzpn1W7K_f
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: q72kFJDPbi6GCvfvYJFAr/projectcss
import sty from "./PlasmicLinkHalcyon.module.css"; // plasmic-import: LUgzpn1W7K_f/css

createPlasmicElementProxy;

export const PlasmicLinkHalcyon__VariantProps = new Array(
  "memberships",
  "schedule",
  "aboutUs",
  "contact",
  "privates",
  "privacyPolicy",
  "cookiesPolicy",
  "unnamedGroupOfVariants",
  "termsOfService"
);

export const PlasmicLinkHalcyon__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLinkHalcyon__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "memberships",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.memberships
      },
      {
        path: "schedule",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.schedule
      },
      {
        path: "aboutUs",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.aboutUs
      },
      {
        path: "contact",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.contact
      },
      {
        path: "privates",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.privates
      },
      {
        path: "privacyPolicy",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.privacyPolicy
      },
      {
        path: "cookiesPolicy",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.cookiesPolicy
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      },
      {
        path: "termsOfService",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.termsOfService
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootaboutUs]: hasVariant($state, "aboutUs", "aboutUs"),
          [sty.rootcontact]: hasVariant($state, "contact", "contact"),
          [sty.rootcookiesPolicy]: hasVariant(
            $state,
            "cookiesPolicy",
            "cookiesPolicy"
          ),
          [sty.rootmemberships]: hasVariant(
            $state,
            "memberships",
            "memberships"
          ),
          [sty.rootprivacyPolicy]: hasVariant(
            $state,
            "privacyPolicy",
            "privacyPolicy"
          ),
          [sty.rootprivates]: hasVariant($state, "privates", "privates"),
          [sty.rootschedule]: hasVariant($state, "schedule", "schedule"),
          [sty.roottermsOfService]: hasVariant(
            $state,
            "termsOfService",
            "termsOfService"
          ),
          [sty.rootunnamedGroupOfVariants_unnamedVariant]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "unnamedVariant"
          )
        }
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linkaboutUs]: hasVariant($state, "aboutUs", "aboutUs"),
          [sty.linkcontact]: hasVariant($state, "contact", "contact"),
          [sty.linkcookiesPolicy]: hasVariant(
            $state,
            "cookiesPolicy",
            "cookiesPolicy"
          ),
          [sty.linkmemberships]: hasVariant(
            $state,
            "memberships",
            "memberships"
          ),
          [sty.linkprivacyPolicy]: hasVariant(
            $state,
            "privacyPolicy",
            "privacyPolicy"
          ),
          [sty.linkprivates]: hasVariant($state, "privates", "privates"),
          [sty.linkschedule]: hasVariant($state, "schedule", "schedule"),
          [sty.linktermsOfService]: hasVariant(
            $state,
            "termsOfService",
            "termsOfService"
          )
        })}
        component={Link}
        href={
          hasVariant($state, "termsOfService", "termsOfService")
            ? `/terms-of-service`
            : hasVariant($state, "cookiesPolicy", "cookiesPolicy")
            ? `/cookies-policy`
            : hasVariant($state, "privacyPolicy", "privacyPolicy")
            ? `/privacy-policy`
            : hasVariant($state, "privates", "privates")
            ? `/privates`
            : hasVariant($state, "contact", "contact")
            ? `/contact-us`
            : hasVariant($state, "aboutUs", "aboutUs")
            ? `/about-us`
            : hasVariant($state, "schedule", "schedule")
            ? `/schedule`
            : hasVariant($state, "memberships", "memberships")
            ? `/memberships`
            : `/home`
        }
        platform={"nextjs"}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textaboutUs]: hasVariant($state, "aboutUs", "aboutUs"),
              [sty.textcontact]: hasVariant($state, "contact", "contact"),
              [sty.textcookiesPolicy]: hasVariant(
                $state,
                "cookiesPolicy",
                "cookiesPolicy"
              ),
              [sty.textmemberships]: hasVariant(
                $state,
                "memberships",
                "memberships"
              ),
              [sty.textprivacyPolicy]: hasVariant(
                $state,
                "privacyPolicy",
                "privacyPolicy"
              ),
              [sty.textprivates]: hasVariant($state, "privates", "privates"),
              [sty.textschedule]: hasVariant($state, "schedule", "schedule"),
              [sty.texttermsOfService]: hasVariant(
                $state,
                "termsOfService",
                "termsOfService"
              )
            }
          )}
        >
          {hasVariant($state, "termsOfService", "termsOfService")
            ? "Terms of Service"
            : hasVariant($state, "cookiesPolicy", "cookiesPolicy")
            ? "Cookies Policy"
            : hasVariant($state, "privacyPolicy", "privacyPolicy")
            ? "Privacy Policy"
            : hasVariant($state, "privates", "privates")
            ? "Privates"
            : hasVariant($state, "contact", "contact")
            ? "Contact"
            : hasVariant($state, "aboutUs", "aboutUs")
            ? "About Us"
            : hasVariant($state, "schedule", "schedule")
            ? "Schedule"
            : hasVariant($state, "memberships", "memberships")
            ? "Memberships"
            : "Home"}
        </div>
      </PlasmicLink__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "text"],
  link: ["link", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinkHalcyon__ArgProps,
          internalVariantPropNames: PlasmicLinkHalcyon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinkHalcyon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkHalcyon";
  } else {
    func.displayName = `PlasmicLinkHalcyon.${nodeName}`;
  }
  return func;
}

export const PlasmicLinkHalcyon = Object.assign(
  // Top-level PlasmicLinkHalcyon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicLinkHalcyon
    internalVariantProps: PlasmicLinkHalcyon__VariantProps,
    internalArgProps: PlasmicLinkHalcyon__ArgProps
  }
);

export default PlasmicLinkHalcyon;
/* prettier-ignore-end */
