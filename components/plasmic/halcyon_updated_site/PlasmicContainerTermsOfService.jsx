// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q72kFJDPbi6GCvfvYJFAr
// Component: WW8SK_BcqV2e
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: q72kFJDPbi6GCvfvYJFAr/projectcss
import sty from "./PlasmicContainerTermsOfService.module.css"; // plasmic-import: WW8SK_BcqV2e/css

createPlasmicElementProxy;

export const PlasmicContainerTermsOfService__VariantProps = new Array();

export const PlasmicContainerTermsOfService__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContainerTermsOfService__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <section
      data-plasmic-name={"containerTermsOfService"}
      data-plasmic-override={overrides.containerTermsOfService}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.containerTermsOfService
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"introduction"}
        data-plasmic-override={overrides.introduction}
        hasGap={true}
        className={classNames(projectcss.all, sty.introduction)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__onZb
          )}
        >
          {"Introduction"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nJwRp
          )}
        >
          {
            'Welcome to Halcyon Studios! These Terms of Service ("Terms") govern your use of our website located at HalcyonStudio.us (the "Site") and all related services provided by us. By accessing or using the Site, you agree to be bound by these Terms and our Privacy Policy.'
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"definitions"}
        data-plasmic-override={overrides.definitions}
        hasGap={true}
        className={classNames(projectcss.all, sty.definitions)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bZqeh
          )}
        >
          {"Definitions"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__y2HFr
          )}
        >
          {
            'Throughout these Terms, the words "we," "us," and "our" refer to Halcyon Studios, and "you" refers to any user of the Site.'
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"useOfSite"}
        data-plasmic-override={overrides.useOfSite}
        hasGap={true}
        className={classNames(projectcss.all, sty.useOfSite)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wg1Nl
          )}
        >
          {"Use of the Site"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lE4V
          )}
        >
          {
            "You agree to use the Site only for lawful purposes and in a way that does not infringe upon the rights of others or inhibit their use and enjoyment of the Site. You are solely responsible for all content you post on the Site."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"memberships"}
        data-plasmic-override={overrides.memberships}
        hasGap={true}
        className={classNames(projectcss.all, sty.memberships)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uYox
          )}
        >
          {"Memberships"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oh6WP
          )}
        >
          {
            "By purchasing a yoga membership from Halcyon Studios, you agree to abide by the terms outlined in these Terms and any additional terms provided to you at the time of purchase."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"productsAndServices"}
        data-plasmic-override={overrides.productsAndServices}
        hasGap={true}
        className={classNames(projectcss.all, sty.productsAndServices)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ek2BR
          )}
        >
          {"Products and Services"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bLDp
          )}
        >
          {
            "Halcyon Studios offers yoga memberships subject to availability. All products should be used strictly in accordance with any applicable instructions, precautions, and guidelines."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"purchases"}
        data-plasmic-override={overrides.purchases}
        hasGap={true}
        className={classNames(projectcss.all, sty.purchases)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cK2WD
          )}
        >
          {"Purchases"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fOhPi
          )}
        >
          {
            "Products, prices, and promotions are subject to change without notice. We reserve the right to suspend, update, or cancel any promotions at any time without notice. We strive to display accurate price information but may occasionally make errors, which we reserve the right to correct."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"paymentTerms"}
        data-plasmic-override={overrides.paymentTerms}
        hasGap={true}
        className={classNames(projectcss.all, sty.paymentTerms)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mLipD
          )}
        >
          {"Payment Terms"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zonVq
          )}
        >
          {
            "Payment for yoga memberships is due before acceptance of an order. By making a purchase, you represent that all information provided is true, correct, and complete."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"paymentProcessing"}
        data-plasmic-override={overrides.paymentProcessing}
        hasGap={true}
        className={classNames(projectcss.all, sty.paymentProcessing)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2LXLt
          )}
        >
          {"Payment Processing"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__v0I74
          )}
        >
          {
            "Payment processing services for products purchased on the Site are provided by a third-party payment processor."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"disclaimers"}
        data-plasmic-override={overrides.disclaimers}
        hasGap={true}
        className={classNames(projectcss.all, sty.disclaimers)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dX22K
          )}
        >
          {"Disclaimers"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pSd7D
          )}
        >
          {
            "The information provided on the Site is for general informational purposes only and should not be considered medical or professional advice. Consult your physician before starting any exercise program."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"limitationOfLiability"}
        data-plasmic-override={overrides.limitationOfLiability}
        hasGap={true}
        className={classNames(projectcss.all, sty.limitationOfLiability)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uUncc
          )}
        >
          {"Limitation of Liability"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__t4Ya
          )}
        >
          {
            "alcyon Studios shall not be liable for any damages resulting from your use of the Site or services provided. Our liability is limited to the extent permitted by law."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"indemnification"}
        data-plasmic-override={overrides.indemnification}
        hasGap={true}
        className={classNames(projectcss.all, sty.indemnification)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__f2Qpr
          )}
        >
          {"Indemnification"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ihNrD
          )}
        >
          {
            "You agree to indemnify and hold Halcyon Studios harmless from any claims arising out of your use of the Site or breach of these Terms."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"forceMajure"}
        data-plasmic-override={overrides.forceMajure}
        hasGap={true}
        className={classNames(projectcss.all, sty.forceMajure)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xtRjd
          )}
        >
          {"Force Majure"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__otB2K
          )}
        >
          {
            "We will not be liable for any failure or delay in our performance under these Terms due to circumstances beyond our reasonable control."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"governingLaw"}
        data-plasmic-override={overrides.governingLaw}
        hasGap={true}
        className={classNames(projectcss.all, sty.governingLaw)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__d8ScM
          )}
        >
          {"Governing Law"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ncOYw
          )}
        >
          {
            "These Terms shall be governed by and construed in accordance with the laws of the State of Florida, USA."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"disputeResolution"}
        data-plasmic-override={overrides.disputeResolution}
        hasGap={true}
        className={classNames(projectcss.all, sty.disputeResolution)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7CNrp
          )}
        >
          {"Dispute Resolution"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jsozm
          )}
        >
          {
            "Any disputes arising under these Terms shall be resolved through arbitration in Tampa, Florida, in accordance with the rules of the American Arbitration Association."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"miscellaneous"}
        data-plasmic-override={overrides.miscellaneous}
        hasGap={true}
        className={classNames(projectcss.all, sty.miscellaneous)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__c0Am2
          )}
        >
          {"Miscellaneous"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oZpz
          )}
        >
          {
            "These Terms constitute the entire agreement between you and Halcyon Studios regarding your use of the Site. If any provision of these Terms is found to be invalid, the remaining provisions shall remain in full force and effect."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"contactUs"}
        data-plasmic-override={overrides.contactUs}
        hasGap={true}
        className={classNames(projectcss.all, sty.contactUs)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vnCs0
          )}
        >
          {"Contact Us"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2EeJb
          )}
        >
          {
            "If you have any questions or concerns about these Terms, please contact us at admin@halcyonstudio.us."
          }
        </div>
      </Stack__>
    </section>
  );
}

const PlasmicDescendants = {
  containerTermsOfService: [
    "containerTermsOfService",
    "introduction",
    "definitions",
    "useOfSite",
    "memberships",
    "productsAndServices",
    "purchases",
    "paymentTerms",
    "paymentProcessing",
    "disclaimers",
    "limitationOfLiability",
    "indemnification",
    "forceMajure",
    "governingLaw",
    "disputeResolution",
    "miscellaneous",
    "contactUs"
  ],

  introduction: ["introduction"],
  definitions: ["definitions"],
  useOfSite: ["useOfSite"],
  memberships: ["memberships"],
  productsAndServices: ["productsAndServices"],
  purchases: ["purchases"],
  paymentTerms: ["paymentTerms"],
  paymentProcessing: ["paymentProcessing"],
  disclaimers: ["disclaimers"],
  limitationOfLiability: ["limitationOfLiability"],
  indemnification: ["indemnification"],
  forceMajure: ["forceMajure"],
  governingLaw: ["governingLaw"],
  disputeResolution: ["disputeResolution"],
  miscellaneous: ["miscellaneous"],
  contactUs: ["contactUs"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContainerTermsOfService__ArgProps,
          internalVariantPropNames: PlasmicContainerTermsOfService__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContainerTermsOfService__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "containerTermsOfService") {
    func.displayName = "PlasmicContainerTermsOfService";
  } else {
    func.displayName = `PlasmicContainerTermsOfService.${nodeName}`;
  }
  return func;
}

export const PlasmicContainerTermsOfService = Object.assign(
  // Top-level PlasmicContainerTermsOfService renders the root element
  makeNodeComponent("containerTermsOfService"),
  {
    // Helper components rendering sub-elements
    introduction: makeNodeComponent("introduction"),
    definitions: makeNodeComponent("definitions"),
    useOfSite: makeNodeComponent("useOfSite"),
    memberships: makeNodeComponent("memberships"),
    productsAndServices: makeNodeComponent("productsAndServices"),
    purchases: makeNodeComponent("purchases"),
    paymentTerms: makeNodeComponent("paymentTerms"),
    paymentProcessing: makeNodeComponent("paymentProcessing"),
    disclaimers: makeNodeComponent("disclaimers"),
    limitationOfLiability: makeNodeComponent("limitationOfLiability"),
    indemnification: makeNodeComponent("indemnification"),
    forceMajure: makeNodeComponent("forceMajure"),
    governingLaw: makeNodeComponent("governingLaw"),
    disputeResolution: makeNodeComponent("disputeResolution"),
    miscellaneous: makeNodeComponent("miscellaneous"),
    contactUs: makeNodeComponent("contactUs"),
    // Metadata about props expected for PlasmicContainerTermsOfService
    internalVariantProps: PlasmicContainerTermsOfService__VariantProps,
    internalArgProps: PlasmicContainerTermsOfService__ArgProps
  }
);

export default PlasmicContainerTermsOfService;
/* prettier-ignore-end */
